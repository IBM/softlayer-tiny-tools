- id: 1.1.1.a
  name: "Kubernetes API Server Pod Specification File Permissions"
  component: "master"
  audit: |
    stat -c %a /etc/kubernetes/static-pod-resources/kube-apiserver-pod-*/kube-apiserver-pod.yaml | jq -ncR '[inputs]'

- id: 1.1.2.a
  name: "Kubernetes API Server Pod Specification File Ownership"
  component: "master"
  audit: |
    stat -c %U:%G /etc/kubernetes/static-pod-resources/kube-apiserver-pod-*/kube-apiserver-pod.yaml | jq -ncR '[inputs]'

- id: 1.1.3.a
  name: "Kubernetes Controller Manager Pod Specificiation File Permissions"
  component: "master"
  audit: |
    stat -c %a /etc/kubernetes/static-pod-resources/kube-controller-manager-pod-*/kube-controller-manager-pod.yaml | jq -ncR '[inputs]'

- id: 1.1.4.a
  name: "Kubernetes Controller Manager Pod Specification File Ownership"
  component: "master"
  audit: |
    stat -c %U:%G /etc/kubernetes/static-pod-resources/kube-controller-manager-pod-*/kube-controller-manager-pod.yaml | jq -ncR '[inputs]'

- id: 1.1.5.a
  name: "Kubernetes Scheduler Pod Specification File Permissions"
  component: "master"
  audit: |
    stat -c %a /etc/kubernetes/static-pod-resources/kube-scheduler-pod-*/kube-scheduler-pod.yaml | jq -ncR '[inputs]'

- id: 1.1.6.a
  name: "Kubernetes Scheduler Pod Specification File Ownership"
  component: "master"
  audit: |
    stat -c %U:%G /etc/kubernetes/static-pod-resources/kube-scheduler-pod-*/kube-scheduler-pod.yaml | jq -ncR '[inputs]'

- id: 1.1.7.a
  name: "Etcd Member Pod Specification File Permissions"
  component: "master"
  audit: |
    stat -c %a /etc/kubernetes/static-pod-resources/etcd-pod-*/etcd-pod.yaml | jq -ncR '[inputs]'

- id: 1.1.8.a
  name: "etcd Member Pod Specification File Ownership"
  component: "master"
  audit: |
    stat -c %U:%G /etc/kubernetes/static-pod-resources/etcd-pod-*/etcd-pod.yaml | jq -ncR '[inputs]'

- id: 1.1.9.a
  name: "OpenShift Container Network Interface Files Permissions"
  component: "master"
  audit: |
    stat -c %a /etc/cni/net.d/* | jq -ncR '[inputs]'

- id: 1.1.9.b
  name: "OpenShift SDN Container Network Interface Plugin IP Address Allocations Permissions"
  component: "master"
  audit: |
    stat -c %a /var/lib/cni/networks/openshift-sdn/* | jq -ncR '[inputs]'

- id: 1.1.9.c
  name: "OpenShift Multus Container Network Interface Plugin Files Permissions"
  component: "master"
  audit: |
    stat -c %a /var/run/multus/cni/net.d/* | jq -ncR '[inputs]'

- id: 1.1.9.d
  name: "OpenShift Open vSwitch Files Permissions"
  component: "master"
  audit: |
    stat -c %a /etc/openvswitch/* | jq -ncR '[inputs]'

- id: 1.1.9.e
  name: "OVNKubernetes socket Permissions"
  component: "master"
  audit: |
    if test -e /run/ovn-kubernetes/cni/ovn-cni-server.sock; then
      stat -c %a /run/ovn-kubernetes/cni/ovn-cni-server.sock | jq -ncR '[inputs]'
    else
      echo "600" | jq -ncR '[inputs]'
    fi

- id: 1.1.9.f
  name: "OVNKubernetes DB files Permissions"
  component: "master"
  audit: |
    if test -d /var/lib/ovn; then
      stat -c %a /var/lib/ovn/etc/*.db | jq -ncR '[inputs]'
    else
      echo "600" | jq -ncR '[inputs]'
    fi

- id: 1.1.9.g
  name: "Open vSwitch Configuration Database Lock Permissions"
  component: "master"
  audit: |
    stat -c %a /etc/openvswitch/.conf.db.~lock~ | jq -ncR '[inputs]'

- id: 1.1.9.h
  name: "Open vSwitch Process ID File Permissions"
  component: "master"
  audit: |
    stat -c %a /var/run/openvswitch/ovs-vswitchd.pid | jq -ncR '[inputs]'

- id: 1.1.9.i
  name: "Open vSwitch Persistent System ID Permissions"
  component: "master"
  audit: |
    stat -c %a /etc/openvswitch/system-id.conf | jq -ncR '[inputs]'

- id: 1.1.9.j
  name: "Open vSwitch Daemon PID File Permissions"
  component: "master"
  audit: |
    stat -c %a /run/openvswitch/ovs-vswitchd.pid | jq -ncR '[inputs]'

- id: 1.1.9.k
  name: "Open vSwitch Database Server PID Permissions"
  component: "master"
  audit: |
    stat -c %a /run/openvswitch/ovsdb-server.pid | jq -ncR '[inputs]'

- id: 1.1.9.l
  name: "OpenShift SDN CNI Server Config Permissions"
  component: "master"
  audit: |
    stat -c %a /var/run/openshift-sdn/cniserver/config.json | jq -ncR '[inputs]'

- id: 1.1.10.a
  name: "OpenShift Container Network Interface Files Ownership"
  component: "master"
  audit: |
    stat -c %U:%G /etc/cni/net.d/* | jq -ncR '[inputs]'

- id: 1.1.10.b
  name: "OpenShift Multus Container Network Interface Plugin Files Ownership"
  component: "master"
  audit: |
    stat -c %U:%G /var/run/multus/cni/net.d/* | jq -ncR '[inputs]'

- id: 1.1.10.c
  name: "OpenShift SDN Container Network Interface Plugin IP Address Allocations Ownership"
  component: "master"
  audit: |
    stat -c %U:%G /var/lib/cni/networks/openshift-sdn/* | jq -ncR '[inputs]'

- id: 1.1.10.d
  name: "OpenShift Open vSwitch Files Ownership"
  component: "master"
  audit: |
    stat -c %U:%G /etc/openvswitch/* | jq -ncR '[inputs]'

- id: 1.1.10.e
  name: "OVNKubernetes Socket Ownership"
  component: "master"
  audit: |
    if test -e /run/ovn-kubernetes/cni/ovn-cni-server.sock; then
      stat -c %U:%G /run/ovn-kubernetes/cni/ovn-cni-server.sock | jq -ncR '[inputs]'
    else
      echo "root:root" | jq -ncR '[inputs]'
    fi

- id: 1.1.10.f
  name: "OVNKubernetes DB files Ownership"
  component: "master"
  audit: |
    if test -d /var/lib/ovn; then
      stat -c %U:%G /var/lib/ovn/etc/*.db | jq -ncR '[inputs]'
    else
      echo "root:root" | jq -ncR '[inputs]'
    fi

- id: 1.1.10.g
  name: "OpenShift SDN CNI Server Config Ownership"
  component: "master"
  audit: |
    stat -c %U:%G /var/run/openshift-sdn/cniserver/config.json | jq -ncR '[inputs]'

- id: 1.1.10.h
  name: "Open vSwitch Configuration Database Ownership"
  component: "master"
  audit: |
    stat -c %U:%G /etc/openvswitch/conf.db | jq -ncR '[inputs]'

- id: 1.1.10.i
  name: "Open vSwitch Configuration Database Lock Ownership"
  component: "master"
  audit: |
    stat -c %U:%G /etc/openvswitch/.conf.db.~lock~ | jq -ncR '[inputs]'

- id: 1.1.10.j
  name: "Open vSwitch Daemon PID File Ownership"
  component: "master"
  audit: |
    stat -c %U:%G /run/openvswitch/ovs-vswitchd.pid | jq -ncR '[inputs]'

- id: 1.1.10.k
  name: "Open vSwitch Persistent System ID Ownership"
  component: "master"
  audit: |
    stat -c %U:%G /etc/openvswitch/system-id.conf | jq -ncR '[inputs]'

- id: 1.1.10.l
  name: "Open vSwitch Daemon PID File Ownership"
  component: "master"
  audit: |
    stat -c %U:%G /run/openvswitch/ovs-vswitchd.pid | jq -ncR '[inputs]'

- id: 1.1.10.m
  name: "Open vSwitch Database Server PID Ownership"
  component: "master"
  audit: |
    stat -c %U:%G /run/openvswitch/ovsdb-server.pid | jq -ncR '[inputs]'

- id: 1.1.11.a
  name: "Etcd Database Directory Permissions"
  component: "master"
  audit: |
    stat -c %a /var/lib/etcd | jq -ncR '[inputs]'

- id: 1.1.11.b
  name: "Etcd Write-Ahead-Log Files Permissions"
  component: "master"
  audit: |
    stat -c %a /var/lib/etcd/member/wal/* | jq -ncR '[inputs]'

- id: 1.1.12.a
  name: "Etcd Database Directory Ownership"
  component: "master"
  audit: |
    stat -c %U:%G /var/lib/etcd/member/* | jq -ncR '[inputs]'

- id: 1.1.12.b
  name: "Etcd Write-Ahead-Log Files Ownership"
  component: "master"
  audit: |
    stat -c %U:%G /var/lib/etcd/member/wal/* | jq -ncR '[inputs]'

- id: 1.1.13.a
  name: "OpenShift Admin Kubeconfig File Permissions"
  component: "master"
  audit: |
    stat -c %a /etc/kubernetes/kubeconfig | jq -ncR '[inputs]'

- id: 1.1.13.b
  name: "OpenShift Admin Kubeconfig Files Permissions"
  component: "master"
  audit: |
    stat -c %a /etc/kubernetes/static-pod-resources/kube-apiserver-certs/secrets/node-kubeconfigs/*.kubeconfig | jq -ncR '[inputs]'

- id: 1.1.14.a
  name: "OpenShift Admin Kubeconfig File Ownership"
  component: "master"
  audit: |
    stat -c %U:%G /etc/kubernetes/kubeconfig | jq -ncR '[inputs]'

- id: 1.1.14.b
  name: "OpenShift Admin Kubeconfig Files Ownership"
  component: "master"
  audit: |
    stat -c %U:%G /etc/kubernetes/static-pod-resources/kube-apiserver-certs/secrets/node-kubeconfigs/*.kubeconfig | jq -ncR '[inputs]'

- id: 1.1.15.a
  name: "Kubernetes Scheduler Kubeconfig File Permissions"
  component: "master"
  audit: |
    stat -c %a /etc/kubernetes/static-pod-resources/kube-scheduler-pod-*/configmaps/scheduler-kubeconfig/kubeconfig | jq -ncR '[inputs]'

- id: 1.1.16.a
  name: "Kubernetes Scheduler Kubeconfig File Ownership"
  component: "master"
  audit: |
    stat -c %U:%G /etc/kubernetes/static-pod-resources/kube-scheduler-pod-*/configmaps/scheduler-kubeconfig/kubeconfig | jq -ncR '[inputs]'

- id: 1.1.17.a
  name: "OpenShift Controller Manager Kubeconfig File Permissions"
  component: "master"
  audit: |
    stat -c %a /etc/kubernetes/static-pod-resources/kube-controller-manager-pod-*/configmaps/controller-manager-kubeconfig/kubeconfig | jq -ncR '[inputs]'

- id: 1.1.18.a
  name: "OpenShift Controller Manager Kubeconfig File Ownership"
  component: "master"
  audit: |
    stat -c %U:%G /etc/kubernetes/static-pod-resources/kube-controller-manager-pod-*/configmaps/controller-manager-kubeconfig/kubeconfig | jq -ncR '[inputs]'

- id: 1.1.19.a
  name: "Etcd PKI Certificate Files Ownership"
  component: "master"
  audit: |
    stat -c %U:%G /etc/kubernetes/static-pod-resources/*/*/*/*.crt | jq -ncR '[inputs]'

- id: 1.1.19.b
  name: "OpenShift PKI Certificate Files Ownership"
  component: "master"
  audit: |
    stat -c %U:%G /etc/kubernetes/static-pod-resources/*/*/*/tls.crt | jq -ncR '[inputs]'

- id: 1.1.19.c
  name: "OpenShift PKI Private Key Files Ownership"
  component: "master"
  audit: |
    stat -c %U:%G /etc/kubernetes/static-pod-resources/*/*/*/*.key | jq -ncR '[inputs]'

- id: 1.1.20.a
  name: "Etcd PKI Certificate Files Permissions"
  component: "master"
  audit: |
    stat -c %a /etc/kubernetes/static-pod-resources/etcd-*/secrets/*/*.crt | jq -ncR '[inputs]'

- id: 1.1.20.b
  name: "OpenShift PKI Certificate Files Permissions"
  component: "master"
  audit: |
    stat -c %a /etc/kubernetes/static-pod-resources/kube-*/secrets/*/tls.crt | jq -ncR '[inputs]'

- id: 1.1.21.a
  name: "OpenShift PKI Private Key Files Permissions"
  component: "master"
  audit: |
    stat -c %a /etc/kubernetes/static-pod-resources/*/*/*/*.key | jq -ncR '[inputs]'

- id: 1.2.1.a
  name: "API Server Anonymous Requests Authorization"
  component: "cluster"
  audit: |
    oc get clusterrolebindings -ojson | jq '.items[].subjects[].name' | grep system

- id: 1.2.2.a
  name: "API Server Disable basic-auth-file"
  component: "cluster"
  audit: |
    oc -n openshift-kube-apiserver get configmap config -o json | jq -r '.data."config.yaml"' | jq '.apiServerArguments."basic-auth-file"' | jq -ncR '[inputs]'

- id: 1.2.3.a
  name: "Token-based Authentication"
  component: "cluster"
  audit: |
    oc -n openshift-kube-apiserver get configmap config -o json | jq -r '.data."config.yaml"' | jq '.apiServerArguments."enable-admissin-plugins"'

- id: 1.2.4.a
  name: "--kubelet-https argument"
  component: "cluster"
  audit: |
    oc -n openshift-kube-apiserver get configmap config -o json | jq -r '.data."config.yaml"' | jq '.apiServerArguments."kubelet-https"[0]' | tr -d '"' | jq -ncR '[inputs]'

- id: 1.2.4.b
  name: "openshift-oauth-apiserver TLS"
  component: "cluster"
  audit: |
    oc -n openshift-apiserver describe secret serving-cert

- id: 1.2.4.c
  name: "openshift-oauth-apiserver TLS"
  component: "cluster"
  audit: |
    oc -n openshift-oauth-apiserver describe secret serving-cert

- id: 1.2.5.a
  name: "API Server kubelet Certificate File"
  component: "cluster"
  audit: |
    oc get configmap config -n openshift-kube-apiserver -ojson | jq -r '.data["config.yaml"]' | jq '.apiServerArguments["kubelet-client-certificate"]'

- id: 1.2.5.c
  name: "API Server kubelet Certificate Key"
  component: "cluster"
  audit: |
    oc get configmap config -n openshift-kube-apiserver -ojson | jq -r '.data["config.yaml"]' | jq '.apiServerArguments["kubelet-client-key"]'

- id: 1.2.6.a
  name: "API Server kubelet Certificate Authority"
  component: "cluster"
  audit: |
    oc get configmap config -n openshift-kube-apiserver -ojson | jq -r '.data["config.yaml"]' | jq -r '.apiServerArguments."kubelet-certificate-authority"'

- id: 1.2.7.a
  name: "Requests Authorization"
  component: "cluster"
  audit: |
    oc get configmap config -n openshift-kube-apiserver -ojson | jq -r '.data["config.yaml"]' | grep '"authorization-mode":\[[^]]*"AlwaysAllow"'

- id: 1.2.8.a
  name: "authorization-mode Node"
  component: "cluster"
  audit: |
    oc get configmap config -n openshift-kube-apiserver -ojson | jq -r '.data["config.yaml"]' | grep '"authorization-mode":\[[^]]*"Node"'

- id: 1.2.9.a
  name: "RBAC authorization-mode"
  component: "cluster"
  audit: |
    oc get configmap config -n openshift-kube-apiserver -ojson | jq -r '.data["config.yaml"]' | grep '"authorization-mode":\[[^]]*"RBAC"'

- id: 1.2.10.a
  name: "APIPriorityAndFairness feature gate"
  component: "cluster"
  audit: |
    oc get kubeapiservers.operator.openshift.io cluster -o json | jq '.spec.observedConfig.apiServerArguments["feature-gates"]'

- id: 1.2.10.b
  name: "API Priority and Fairness catch-all FlowSchema object"
  component: "cluster"
  audit: |
    oc get flowschema -o="name"

- id: 1.2.11.a
  name: "AlwaysAdmit Admission Control Plugin"
  component: "cluster"
  audit: |
    oc -n openshift-kube-apiserver get configmap config -o json | jq -r '.data."config.yaml"' | jq '.apiServerArguments."enable-admission-plugins"'

- id: 1.2.12.a
  name: "Admission Control Plugin AlwaysPullImages"
  component: "cluster"
  audit: |
    oc -n openshift-kube-apiserver get configmap config -o json | jq -r '.data."config.yaml"' | jq '.apiServerArguments."enable-admission-plugins"'

- id: 1.2.13.a
  name: "admission control plugins SecurityContextDeny and PodSecurityPolicy"
  component: "cluster"
  audit: |
    oc -n openshift-kube-apiserver get configmap config -o json | jq -r '.data."config.yaml"' | jq '.apiServerArguments."enable-admission-plugins"'

- id: 1.2.13.b
  name: "admission control plugins"
  component: "cluster"
  audit: |
    oc -n openshift-kube-apiserver get configmap config -o json | jq -r '[.data."config.yaml" | fromjson | .apiServerArguments | select(has("disable-admission-plugins")) | if ."disable-admission-plugins" != ["PodSecurity"] then ."disable-admission-plugins" else empty end][0]' | jq -ncR '[inputs]'

- id: 1.2.14.a
  name: "ServiceAccount Admission Control Plugin"
  component: "cluster"
  audit: |
    oc -n openshift-kube-apiserver get configmap config -o json | jq -r '.data."config.yaml"' | jq '.apiServerArguments."enable-admission-plugins"'

- id: 1.2.15.a
  name: "NamespaceLifecycle Admission Control Plugin"
  component: "cluster"
  audit: |
    oc -n openshift-kube-apiserver get configmap config -o json | jq -r '.data."config.yaml"' | jq '.apiServerArguments."enable-admission-plugins"'

- id: 1.2.16.a
  name: "SecurityContextConstraint Admission Control Plugin"
  component: "cluster"
  audit: |
    oc -n openshift-kube-apiserver get configmap config -o json | jq -r '.data."config.yaml"' | jq '.apiServerArguments."enable-admission-plugins"'

- id: 1.2.17.a
  name: "NodeRestriction Admission Control Plugin"
  component: "cluster"
  audit: |
    oc -n openshift-kube-apiserver get configmap config -o json | jq -r '.data."config.yaml"' | jq '.apiServerArguments."enable-admission-plugins"'

- id: 1.2.18.a
  name: "Insecure Bind Address"
  component: "cluster"
  audit: |
    oc get configmap config -n openshift-kube-apiserver -ojson | jq -r '.data["config.yaml"]' | jq '.apiServerArguments["insecure-bind-address"]'

- id: 1.2.19.a
  name: "Insecure Port Access"
  component: "cluster"
  audit: |
    oc get configmap config -n openshift-kube-apiserver -ojson | jq -r '.data["config.yaml"]' | jq '.apiServerArguments["insecure-port"]'

- id: 1.2.20.a
  name: "bindAddress Port"
  component: "cluster"
  audit: |
    oc get configmap config -n openshift-kube-apiserver -ojson | jq -r '.data["config.yaml"]' | jq -r '.servingInfo["bindAddress"]' | jq -ncR '[inputs]'

- id: 1.2.21.a
  name: "RBAC Profiling Protection - Metrics"
  component: "cluster"
  audit: |
    oc get clusterroles cluster-debugger -o jsonpath='{.rules[0].nonResourceURLs}'

- id: 1.2.22.a
  name: "Audit Log Path (openshift-kube-apiserver)"
  component: "cluster"
  audit: |
    oc get configmap config -n openshift-kube-apiserver -ojson | jq -r '.data["config.yaml"]' | jq '.apiServerArguments["audit-log-path"]'

- id: 1.2.22.b
  name: "Audit Log Path (openshift-apiserver)"
  component: "cluster"
  audit: |
    oc get configmap config -n openshift-apiserver -ojson | jq -r '.data["config.yaml"]' | jq '.apiServerArguments["audit-log-path"][0]' | tr -d '"'

- id: 1.2.23.a
  name: " Audit Log Forwarding"
  component: "cluster"
  audit: |
    oc get clusterlogforwarders instance -n openshift-logging -ojson | jq -r '.spec.pipelines[].inputRefs | contains(["audit"])' | jq -ncR '[inputs]'

- id: 1.2.24.a
  name: "Kubernetes API Server Maximum Retained Audit Logs"
  component: "cluster"
  audit: |
    oc get configmap config -n openshift-kube-apiserver -ojson | jq -r '.data["config.yaml"]' | jq '.apiServerArguments["audit-log-maxbackup"][0]' | tr -d '"' | jq -ncR '[inputs]'

- id: 1.2.24.b
  name: "Kubernetes API Server Maximum Retained Audit Logs"
  component: "cluster"
  audit: |
    oc get configmap config -n openshift-apiserver -ojson | jq -r '.data["config.yaml"]' | jq '.apiServerArguments["audit-log-maxbackup"][0]' | tr -d '"' | jq -ncR '[inputs]'

- id: 1.2.25.a
  name: "Kubernetes API Server Maximum Audit Log Size"
  component: "cluster"
  audit: |
    oc get configmap config -n openshift-kube-apiserver -ojson | jq -r '.data["config.yaml"]' | jq '.apiServerArguments["audit-log-maxsize"][0]' | tr -d '"' | jq -ncR '[inputs]'

- id: 1.2.25.b
  name: "OpenShift API Server Maximum Audit Log Size"
  component: "cluster"
  audit: |
    oc get configmap config -n openshift-apiserver -ojson | jq -r '.data["config.yaml"]' | jq '.apiServerArguments["audit-log-maxsize"][0]' | tr -d '"' | jq -ncR '[inputs]'

- id: 1.2.26.a
  name: "API Server Minimum Request Timeout"
  component: "cluster"
  audit: |
    oc get configmap config -n openshift-kube-apiserver -ojson | jq -r '.data["config.yaml"]' | jq '.apiServerArguments["min-request-timeout"][0]' | tr -d '"' | jq -ncR '[inputs]'

- id: 1.2.27.a
  name: "service-account-lookup argument"
  component: "cluster"
  audit: |
    oc get configmap config -n openshift-kube-apiserver -o json | jq -r '.data["config.yaml"]' | jq -r '.apiServerArguments["service-account-lookup"][0]' | jq -ncR '[inputs]'

- id: 1.2.28.a
  name: "API Server Service Account Public Key"
  component: "cluster"
  audit: |
    oc get configmap config -n openshift-kube-apiserver -ojson | jq -r '.data["config.yaml"]' | jq -r .serviceAccountPublicKeyFiles[0]

- id: 1.2.29.a
  name: "API Server etcd Certificate"
  component: "cluster"
  audit: |
    oc get configmap config -n openshift-kube-apiserver -ojson | jq -r '.data["config.yaml"]' | jq -r '.apiServerArguments."etcd-certfile"'[0]

- id: 1.2.29.b
  name: "API Server etcd Certificate Key"
  component: "cluster"
  audit: |
    oc get configmap config -n openshift-kube-apiserver -ojson | jq -r '.data["config.yaml"]' | jq -r '.apiServerArguments."etcd-keyfile"'[0]

- id: 1.2.30.a
  name: "API Server Certificate"
  component: "cluster"
  audit: |
    oc get configmap config -n openshift-kube-apiserver -ojson | jq -r '.data["config.yaml"]' | jq -r '.apiServerArguments."tls-cert-file"'

- id: 1.2.30.b
  name: "API Server Certificate Key"
  component: "cluster"
  audit: |
    oc get configmap config -n openshift-kube-apiserver -ojson | jq -r '.data["config.yaml"]' | jq -r '.apiServerArguments."tls-private-key-file"'

- id: 1.2.31.a
  name: "API Server Client Certificate Authority"
  component: "cluster"
  audit: |
    oc get configmap config -n openshift-kube-apiserver -ojson | jq -r '.data["config.yaml"]' | jq '.apiServerArguments["client-ca-file"]'[0]

- id: 1.2.32.a
  name: "API Server etcd Certificate Authority"
  component: "cluster"
  audit: |
    oc get configmap config -n openshift-kube-apiserver -ojson | jq -r '.data["config.yaml"]' | jq '.apiServerArguments["etcd-cafile"]'[0]

- id: 1.2.33.a
  name: "Encryption Provider"
  component: "cluster"
  audit: |
    oc get apiserver cluster -ojson | jq -r '.spec.encryption.type' | jq -ncR '[inputs]'

- id: 1.2.34.a
  name: "Encryption Provider Cipher"
  component: "cluster"
  audit: |
    oc get apiserver cluster -ojson | jq -r '.spec.encryption.type' | jq -ncR '[inputs]'

- id: 1.2.35.a
  name: "API Server Cryptographic Ciphers"
  component: "cluster"
  audit: |
    oc get configmap config -n openshift-kube-apiserver -ojson | jq -r '.data["config.yaml"]' | jq '.servingInfo["cipherSuites"]'

- id: 1.3.1.a
  name: "Eviction threshold Settings - evictionSoft: memory.available"
  component: "master"
  audit: |
    oc get --raw /api/v1/nodes/{{ .NodeName }}/proxy/configz | jq '.kubeletconfig|.kind="KubeletConfiguration"|.apiVersion="kubelet.config.k8s.io/v1beta1" | .evictionSoft."memory.available"'

- id: 1.3.1.b
  name: "Eviction threshold Settings - evictionSoft: nodefs.available"
  component: "master"
  audit: |
    oc get --raw /api/v1/nodes/{{ .NodeName }}/proxy/configz | jq '.kubeletconfig|.kind="KubeletConfiguration"|.apiVersion="kubelet.config.k8s.io/v1beta1" | .evictionSoft."nodefs.available"'

- id: 1.3.1.c
  name: "Eviction threshold Settings - evictionSoft: nodefs.inodesFree"
  component: "master"
  audit: |
    oc get --raw /api/v1/nodes/{{ .NodeName }}/proxy/configz | jq '.kubeletconfig|.kind="KubeletConfiguration"|.apiVersion="kubelet.config.k8s.io/v1beta1" | .evictionSoft."nodefs.available"'

- id: 1.3.1.d
  name: "Eviction threshold Settings - evictionSoft: imagefs.available"
  component: "master"
  audit: |
    oc get --raw /api/v1/nodes/{{ .NodeName }}/proxy/configz | jq '.kubeletconfig|.kind="KubeletConfiguration"|.apiVersion="kubelet.config.k8s.io/v1beta1" | .evictionSoft."imagefs.available"'

- id: 1.3.1.e
  name: "Eviction threshold Settings - evictionSoft: imagefs.inodesFree"
  component: "master"
  audit: |
    oc get --raw /api/v1/nodes/{{ .NodeName }}/proxy/configz | jq '.kubeletconfig|.kind="KubeletConfiguration"|.apiVersion="kubelet.config.k8s.io/v1beta1" | .evictionSoft."imagefs.inodesFree"'

- id: 1.3.1.f
  name: "Eviction threshold Settings - evictionHard: memory.available"
  component: "master"
  audit: |
    oc get --raw /api/v1/nodes/{{ .NodeName }}/proxy/configz | jq '.kubeletconfig|.kind="KubeletConfiguration"|.apiVersion="kubelet.config.k8s.io/v1beta1" | .evictionHard."memory.available"'

- id: 1.3.1.g
  name: "Eviction threshold Settings - evictionHard: nodefs.available"
  component: "master"
  audit: |
    oc get --raw /api/v1/nodes/{{ .NodeName }}/proxy/configz | jq '.kubeletconfig|.kind="KubeletConfiguration"|.apiVersion="kubelet.config.k8s.io/v1beta1" | .evictionHard."nodefs.available"'

- id: 1.3.1.h
  name: "Eviction threshold Settings - evictionHard: nodefs.inodesFree"
  component: "master"
  audit: |
    oc get --raw /api/v1/nodes/{{ .NodeName }}/proxy/configz | jq '.kubeletconfig|.kind="KubeletConfiguration"|.apiVersion="kubelet.config.k8s.io/v1beta1" | .evictionHard."nodefs.inodesFree"'

- id: 1.3.1.i
  name: "Eviction threshold Settings - evictionHard: imagefs.available"
  component: "master"
  audit: |
    oc get --raw /api/v1/nodes/{{ .NodeName }}/proxy/configz | jq '.kubeletconfig|.kind="KubeletConfiguration"|.apiVersion="kubelet.config.k8s.io/v1beta1" | .evictionHard."imagefs.available"'

- id: 1.3.1.j
  name: "Eviction threshold Settings - evictionHard: imagefs.inodesFree"
  component: "master"
  audit: |
    oc get --raw /api/v1/nodes/{{ .NodeName }}/proxy/configz | jq '.kubeletconfig|.kind="KubeletConfiguration"|.apiVersion="kubelet.config.k8s.io/v1beta1" | .evictionHard."imagefs.inodesFree"'

- id: 1.3.2.a
  name: "RBAC Profiling Protection - debug/pprof"
  component: "cluster"
  audit: |
    oc get clusterroles cluster-debugger -o jsonpath='{.rules[0].nonResourceURLs}'

- id: 1.3.3.a
  name: "Ensure that use-service-account-credentials is enabled"
  component: "cluster"
  audit: |
    oc get configmaps config -n openshift-kube-controller-manager -ojson | jq -r '.data["config.yaml"]' | jq -r '.extendedArguments["use-service-account-credentials"]'

- id: 1.3.4.a
  name: "Controller Manager Service Account Private Key"
  component: "cluster"
  audit: |
    oc get configmaps config -n openshift-kube-controller-manager -ojson | jq -r '.data["config.yaml"]' | jq -r '.extendedArguments["service-account-private-key-file"]'[0]

- id: 1.3.5.a
  name: "Controller Manager Service Account Certificate Authority Key"
  component: "cluster"
  audit: |
    oc get configmaps config -n openshift-kube-controller-manager -ojson | jq -r '.data["config.yaml"]' | jq -r '.extendedArguments["root-ca-file"]'[0]

- id: 1.3.6.a
  name: "RotateKubeletServerCertificate Argument"
  component: "cluster"
  audit: |
    oc get configmaps config -n openshift-kube-controller-manager -ojson | jq -r '.data["config.yaml"]' | jq -r '.extendedArguments["feature-gates"]'

- id: 1.3.7.a
  name: "Controller secure-port Argument"
  component: "cluster"
  audit: |
    oc get configmaps config -n openshift-kube-controller-manager -ojson |   jq -r '.data["config.yaml"]' | jq '.extendedArguments["secure-port"][]'

- id: 1.3.7.b
  name: "Controller insecure-port Argument"
  component: "cluster"
  audit: |
    oc get configmaps config -n openshift-kube-controller-manager -ojson | jq '[.data."config.yaml" | fromjson | if .extendedArguments["port"]!=null then .extendedArguments["port"]==["0"] else true end][0]' | jq -ncR '[inputs]'

- id: 1.4.2.a
  name: "bind-address Parameter"
  component: "cluster"
  audit: |
    oc get -nopenshift-kube-scheduler cm kube-scheduler-pod -ojson | jq -r '.data["pod.yaml"]' | jq -r '' | grep bind-address

- id: 2.1.a
  name: "etcd Client Certificate"
  component: "cluster"
  audit: |
    oc get -nopenshift-etcd cm etcd-pod -oyaml | grep -E "\-\-cert-file=/etc/kubernetes/static-pod-certs/secrets/etcd-all-[a-z]+/etcd-serving-NODE_NAME.crt"

- id: 2.1.b
  name: "etcd Key File"
  component: "cluster"
  audit: |
    oc get -nopenshift-etcd cm etcd-pod -oyaml | grep -E "\-\-key-file=/etc/kubernetes/static-pod-certs/secrets/etcd-all-[a-z]+/etcd-serving-NODE_NAME.key"

- id: 2.2.a
  name: "Client Certificate Authentication"
  component: "cluster"
  audit: |
    oc get -nopenshift-etcd cm etcd-pod -oyaml | grep "\-\-client-cert-auth=" | awk -F'=' '{print $2}' | tr -d ' \\' | jq -ncR '[inputs]'

- id: 2.3.a
  name: "etcd Self-Signed Certificates"
  component: "cluster"
  audit: |
    oc get cm/etcd-pod -n openshift-etcd -o yaml

- id: 2.4.a
  name: "etcd Peer Client Certificate"
  component: "cluster"
  audit: |
    oc get -nopenshift-etcd cm etcd-pod -oyaml | grep -E "\-\-peer-cert-file=/etc/kubernetes/static-pod-certs/secrets/etcd-all-[a-z]+/etcd-peer-NODE_NAME.crt"

- id: 2.4.b
  name: "etcd Peer Key File"
  component: "cluster"
  audit: |
    oc get -nopenshift-etcd cm etcd-pod -oyaml | grep -E "\-\-peer-key-file=/etc/kubernetes/static-pod-certs/secrets/etcd-all-[a-z]+/etcd-peer-NODE_NAME.key"

- id: 2.5.a
  name: "Peer Client Certificate Authentication"
  component: "cluster"
  audit: |
    oc get -nopenshift-etcd cm etcd-pod -oyaml | grep "\-\-peer-client-cert-auth=" | awk -F'=' '{print $2}' | tr -d ' \\' | jq -ncR '[inputs]'

- id: 2.6.a
  name: "etcd Peer Self-Signed Certificates"
  component: "cluster"
  audit: |
    oc get cm/etcd-pod -n openshift-etcd -o yaml

- id: 3.1.1.a
  name: "Identity Provider Configuration"
  component: "cluster"
  audit: |
    oc get oauths cluster -ojsonpath='{.spec.identityProviders}' | jq

- id: 3.1.1.b
  name: "kubeadmin secret"
  component: "cluster"
  audit: |
    oc get secrets kubeadmin -n kube-system | jq -ncR '[inputs]'

- id: 3.2.2.a
  name: "cluster's audit profile"
  component: "cluster"
  audit: |
    oc get apiservers cluster -ojsonpath='{.spec.audit.profile}'

- id: 4.1.1.a
  name: "Kubelet Service File Permissions"
  component: "cluster"
  audit: |
    for i in $(oc get pods -n openshift-sdn -l app=sdn -oname); do oc exec -n openshift-sdn $i -- stat -c %a /host/etc/systemd/system/kubelet.service 2> /dev/null; done | jq -ncR '[inputs]'

- id: 4.1.2.a
  name: "Kubelet Service File Ownership"
  component: "cluster"
  audit: |
    for i in $(oc get pods -n openshift-sdn -l app=sdn -oname); do oc exec -n openshift-sdn $i -- stat -Lc %U:%G /host/etc/systemd/system/kubelet.service 2> /dev/null; done | jq -ncR '[inputs]'

- id: 4.1.3.a
  name: "Worker Proxy Kubeconfig File Permissions"
  component: "cluster"
  audit: |
    oc get -nopenshift-sdn ds sdn -ojson | jq -r '.spec.template.spec.volumes[] | select(.configMap.name == "sdn-config") | .configMap.defaultMode' | jq -ncR '[inputs]'

- id: 4.1.4.a
  name: "Worker Proxy Kubeconfig File Ownership"
  component: "cluster"
  audit: |
    for i in $(oc get pods -n openshift-sdn -l app=sdn -oname)
    do
      oc exec -n openshift-sdn $i -- stat -Lc %U:%G /config/kube-proxy-config.yaml
    done | jq -ncR '[inputs]'

- id: 4.1.4.b
  name: "Worker Proxy Kubeconfig File Ownership"
  component: "cluster"
  audit: |
    for i in $(oc get pods -n openshift-sdn -l app=sdn -oname); do oc exec -n openshift-sdn $i -- stat -Lc %U:%G /config/kube-proxy-config.yaml ; done | jq -ncR '[inputs]'

- id: 4.2.1.a
  name: "Kubelet Anonymous Authentication"
  component: "kubelet"
  audit: |
    oc get --raw /api/v1/nodes/{{ .NodeName }}/proxy/configz | jq '.kubeletconfig|.kind="KubeletConfiguration"|.apiVersion="kubelet.config.k8s.io/v1beta1"' | grep -A1 anonymous | jq -ncR '[inputs]'

- id: 4.2.2.a
  name: "Webhook Authorization"
  component: "kubelet"
  audit: |
    oc get --raw /api/v1/nodes/{{ .NodeName }}/proxy/configz | jq '.kubeletconfig|.kind="KubeletConfiguration"|.apiVersion="kubelet.config.k8s.io/v1beta1"' | sudo grep -A1 authorization | jq -ncR '[inputs]'

- id: 4.2.3.a
  name: "Kubelet - Client CA Certificate"
  component: "kubelet"
  audit: |
    oc get --raw /api/v1/nodes/{{ .NodeName }}/proxy/configz | jq '.kubeletconfig|.kind="KubeletConfiguration"|.apiVersion="kubelet.config.k8s.io/v1beta1"' | grep -A1 x509

- id: 4.2.4.a
  name: "kubelet Read-Only Port"
  component: "cluster"
  audit: |
    oc get configmap config -n openshift-kube-apiserver -ojson | jq -r '.data["config.yaml"]' | jq -r '.apiServerArguments["kubelet-read-only-port"][0]' | jq -ncR '[inputs]'

- id: 4.2.5.a
  name: "Kubelet - Streaming Timeouts"
  component: "kubelet"
  audit: |
    oc get --raw /api/v1/nodes/{{ .NodeName }}/proxy/configz | jq '.kubeletconfig|.kind="KubeletConfiguration"|.apiVersion="kubelet.config.k8s.io/v1beta1"' | jq '.streamingConnectionIdleTimeout'

- id: 4.2.7.a
  name: "Kubelet - Automatic Firewall Configuration"
  component: "kubelet"
  audit: |
    oc get --raw /api/v1/nodes/{{ .NodeName }}/proxy/configz | jq '.kubeletconfig.makeIPTablesUtilChains' | jq -ncR '[inputs]'

- id: 4.2.9.a
  name: "Kubelet - Event Creation Configuration"
  component: "kubelet"
  audit: |
    oc get --raw /api/v1/nodes/{{ .NodeName }}/proxy/configz | jq '.kubeletconfig|.kind="KubeletConfiguration"|.apiVersion="kubelet.config.k8s.io/v1beta1"' | jq '.eventRecordQPS'

- id: 4.2.10.a
  name: "Kubelet - Client Certificate"
  component: "cluster"
  audit: |
    oc get configmap config -n openshift-kube-apiserver -ojson | jq -r '.data["config.yaml"]' | jq -r '.apiServerArguments["kubelet-client-certificate"]'[0]

- id: 4.2.10.c
  name: "Kubelet - Server Key"
  component: "cluster"
  audit: |
    oc get configmap config -n openshift-kube-apiserver -ojson | jq -r '.data["config.yaml"]' | jq -r '.apiServerArguments["kubelet-client-key"]'[0]

- id: 4.2.12.a
  name: "Kubelet - Server Certificate Rotation"
  component: "kubelet"
  audit: |
    oc get --raw /api/v1/nodes/{{ .NodeName }}/proxy/configz | jq '.kubeletconfig|.kind="KubeletConfiguration"|.apiVersion="kubelet.config.k8s.io/v1beta1"' | jq '.featureGates.RotateKubeletServerCertificate' | jq -ncR '[inputs]'

- id: 4.2.13.a
  name: "Kubelet - Cryptographic Ciphers"
  component: "kubelet"
  audit: |
    oc get --raw /api/v1/nodes/{{ .NodeName }}/proxy/configz | jq '.kubeletconfig|.kind="KubeletConfiguration"|.apiVersion="kubelet.config.k8s.io/v1beta1" | .tlsCipherSuites'

- id: 5.3.1.a
  name: "Kubelet - Cryptographic Ciphers"
  component: "master"
  audit: |
    oc get network cluster -oyaml -ojsonpath='{.spec.networkType}'

- id: 5.5.1.a
  name: "Image Provenance"
  component: "master"
  audit: |
    oc get image.config.openshift.io/cluster -o jsonpath='{.spec.registrySources.allowedRegistries}'
